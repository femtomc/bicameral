[build-system]
requires = ["maturin>=1.0,<2.0"]
build-backend = "maturin"

[project]
name = "bicamrl"
version = "0.1.0"
description = "Persistent memory and learning system for AI assistants via MCP"
readme = "README.md"
requires-python = ">=3.9"
license = { text = "MIT" }
authors = [
    { name = "AI Memory Project", email = "contact@example.com" }
]
keywords = ["ai", "memory", "mcp", "claude", "assistant"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "mcp>=0.1.0",
    "aiosqlite>=0.19.0",
    "click>=8.0.0",
    "pydantic>=2.0.0",
    "aiohttp>=3.9.0",
    "tomli>=2.0.0",
    "textual>=0.47.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "ruff>=0.1.0",
    "pyright>=1.1.0",
]
vector = [
    "lancedb>=0.5.0",
    "chromadb>=0.4.0",
    "pyarrow>=14.0.0",  # Required by lancedb
]

[project.scripts]
bicamrl = "bicamrl.cli:cli"
bicamrl-tui = "bicamrl.tui.__main__:main"

[project.entry-points."mcp.server"]
bicamrl = "bicamrl:server"

[tool.maturin]
python-source = "."
module-name = "bicamrl.bicamrl_tui"
manifest-path = "tui/Cargo.toml"
features = ["pyo3/extension-module"]

[tool.ruff]
line-length = 100
target-version = "py39"

[tool.ruff.lint]
select = ["E", "F", "I", "N", "W", "B", "C90"]

[tool.ruff.format]
# Use ruff's formatter instead of black
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.pyright]
pythonVersion = "3.9"
typeCheckingMode = "basic"
reportUnusedImport = true
reportUnusedClass = true
reportUnusedFunction = true
reportUnusedVariable = true
reportDuplicateImport = true
reportWildcardImportFromLibrary = true
reportMissingImports = false
reportMissingModuleSource = false
reportIncompatibleMethodOverride = false
reportIncompatibleVariableOverride = false
reportMissingTypeStubs = false
reportUnknownParameterType = false
reportUnknownMemberType = false
reportUnknownVariableType = false
reportUnknownArgumentType = false
reportMissingParameterType = false

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
pythonpath = ["."]
asyncio_mode = "auto"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=bicamrl",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
]

[tool.coverage.run]
branch = true
source = ["bicamrl"]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if TYPE_CHECKING:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
